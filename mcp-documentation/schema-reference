---
tags: [mcp, schema, index]
---

# MCP Schema Reference — Index

This reference is split into focused notes:

- [[MCP Schema - Content Types]]
- [[MCP Schema - Resources]]
- [[MCP Schema - Tools]]
- [[MCP Schema - Requests & Responses]]

Tips
- Use “Requests & Responses” for endpoints, initialization, logging, notifications, pagination, prompts/completions, elicitation, and sampling.
- Use cross-links in each note to jump to related types and endpoints.


2) New note: [[MCP Schema - Content Types]]

---
tags: [mcp, schema, content-types]
---

# MCP Schema — Content Types

Overview
- Content blocks include text, image, audio, and resource references.
- Messages:
  - SamplingMessage: for LLM APIs
  - PromptMessage: for server prompts; can include resources

Core Types

Role
- "user" | "assistant"

Annotations
- Optional hints for display/usage.

```ts
interface Annotations {
  audience?: Role[];        // e.g., ["user", "assistant"]
  lastModified?: string;    // ISO 8601 e.g., "2025-01-12T15:00:58Z"
  priority?: number;        // 0..1 (1 = most important)
}
```

ContentBlock (union)
```ts
type ContentBlock =
  | TextContent
  | ImageContent
  | AudioContent
  | ResourceLink        // see [[MCP Schema - Resources]]
  | EmbeddedResource;   // see [[MCP Schema - Resources]]
```

TextContent
```ts
interface TextContent {
  type: "text";
  text: string;
  annotations?: Annotations;
  _meta?: { [key: string]: unknown };
}
```

ImageContent
```ts
interface ImageContent {
  type: "image";
  data: string;              // base64
  mimeType: string;          // e.g., "image/png"
  annotations?: Annotations;
  _meta?: { [key: string]: unknown };
}
```

AudioContent
```ts
interface AudioContent {
  type: "audio";
  data: string;              // base64
  mimeType: string;          // e.g., "audio/mpeg"
  annotations?: Annotations;
  _meta?: { [key: string]: unknown };
}
```

Messages

SamplingMessage
- For LLM APIs (no embedded resources).
```ts
interface SamplingMessage {
  role: Role;
  content: TextContent | ImageContent | AudioContent;
}
```

PromptMessage
- Like SamplingMessage, but allows resource links/embeds.
```ts
interface PromptMessage {
  role: Role;
  content: ContentBlock;
}
```

Notes and Constraints
- Base64 fields:
  - ImageContent.data, AudioContent.data
- ContentBlock can include ResourceLink and EmbeddedResource; see [[MCP Schema - Resources]] for details.


3) New note: [[MCP Schema - Resources]]

---
tags: [mcp, schema, resources]
---

# MCP Schema — Resources

Overview
- Resources represent files or data the server can read, link, or embed.
- Includes roots (client-scoped file system entry points), templates, and subscriptions.

Resource (discovery metadata)
```ts
interface Resource {
  uri: string;
  name: string;
  title?: string;
  description?: string;
  mimeType?: string;
  size?: number; // raw bytes, pre-encoding
  annotations?: Annotations; // from [[MCP Schema - Content Types]]
  _meta?: { [key: string]: unknown };
}
```

ResourceContents (base)
```ts
interface ResourceContents {
  uri: string;
  mimeType?: string;
  _meta?: { [key: string]: unknown };
}
```

TextResourceContents
```ts
interface TextResourceContents extends ResourceContents {
  text: string; // only if the resource is actually textual
}
```

BlobResourceContents
```ts
interface BlobResourceContents extends ResourceContents {
  blob: string; // base64
  // mimeType?: string; // already present in base (optional override)
}
```

ResourceLink (in content)
```ts
interface ResourceLink {
  type: "resource_link";
  uri: string;
  name: string;
  title?: string;
  description?: string;
  mimeType?: string;
  size?: number;
  annotations?: Annotations;
  _meta?: { [key: string]: unknown };
}
```

EmbeddedResource (in content)
```ts
interface EmbeddedResource {
  type: "resource";
  resource: TextResourceContents | BlobResourceContents;
  annotations?: Annotations;
  _meta?: { [key: string]: unknown };
}
```

Resource Templates
```ts
interface ResourceTemplate {
  name: string;
  uriTemplate: string; // RFC 6570
  title?: string;
  description?: string;
  mimeType?: string;   // only if all matches share one type
  annotations?: Annotations;
  _meta?: { [key: string]: unknown };
}

interface ResourceTemplateReference {
  type: "ref/resource";
  uri: string; // URI or URI template
}
```

Roots
```ts
interface Root {
  uri: string;        // must start with file:// (current spec)
  name?: string;
  _meta?: { [key: string]: unknown };
}
```

Endpoints

List resources
```ts
// request
interface ListResourcesRequest {
  method: "resources/list";
  params?: { cursor?: string };
}

// result
interface ListResourcesResult {
  _meta?: { [key: string]: unknown };
  resources: Resource[];
  nextCursor?: string;
}
```

Read resource
```ts
// request
interface ReadResourceRequest {
  method: "resources/read";
  params: { uri: string };
}

// result
interface ReadResourceResult {
  _meta?: { [key: string]: unknown };
  contents: (TextResourceContents | BlobResourceContents)[];
}
```

Subscribe / Unsubscribe
```ts
interface SubscribeRequest {
  method: "resources/subscribe";
  params: { uri: string };
}

interface UnsubscribeRequest {
  method: "resources/unsubscribe";
  params: { uri: string };
}
```

List resource templates
```ts
interface ListResourceTemplatesRequest {
  method: "resources/templates/list";
  params?: { cursor?: string };
}

interface ListResourceTemplatesResult {
  _meta?: { [key: string]: unknown };
  resourceTemplates: ResourceTemplate[];
  nextCursor?: string;
}
```

Roots listing
```ts
interface ListRootsRequest {
  method: "roots/list";
  params?: {
    _meta?: { progressToken?: ProgressToken; [key: string]: unknown };
    [key: string]: unknown;
  };
}

interface ListRootsResult {
  _meta?: { [key: string]: unknown };
  roots: Root[];
}
```

Notifications (resources + roots)
```ts
// notified when available resources change
interface ResourceListChangedNotification {
  method: "notifications/resources/list_changed";
  params?: { _meta?: { [key: string]: unknown }; [key: string]: unknown };
}

// notified when a specific resource (or sub-resource) changed (after subscribe)
interface ResourceUpdatedNotification {
  method: "notifications/resources/updated";
  params: { uri: string };
}

// client tells server that roots changed
interface RootsListChangedNotification {
  method: "notifications/roots/list_changed";
  params?: { _meta?: { [key: string]: unknown }; [key: string]: unknown };
}
```

Notes and Constraints
- TextResourceContents.text must only be used for truly textual content.
- ResourceLink items returned by tools are not guaranteed to appear in resources/list.
- Root.uri must start with file:// (current spec restriction).
- Pagination: all list endpoints may accept params.cursor and return nextCursor.
- See [[MCP Schema - Requests & Responses]] for JSON-RPC envelopes, progress, and cancellation.


4) New note: [[MCP Schema - Tools]]

---
tags: [mcp, schema, tools]
---

# MCP Schema — Tools

Overview
- Tools are callable functions the server exposes. The client invokes them with JSON Schema-validated inputs.
- Errors from the tool should be returned in CallToolResult with isError=true (not as protocol errors), so models can self-correct.

Tool
```ts
interface Tool {
  name: string;
  title?: string; // UI-preferred display name
  description?: string;
  inputSchema: {
    type: "object";
    properties?: { [key: string]: object };
    required?: string[];
  };
  outputSchema?: {
    type: "object";
    properties?: { [key: string]: object };
    required?: string[];
  };
  annotations?: ToolAnnotations;
  _meta?: { [key: string]: unknown };
}

interface ToolAnnotations {
  title?: string;           // hint display title
  readOnlyHint?: boolean;   // default: false
  destructiveHint?: boolean;// default: true
  idempotentHint?: boolean; // default: false
  openWorldHint?: boolean;  // default: true
}
```

Display name precedence
- Use: title → annotations.title → name

Endpoints

List tools
```ts
interface ListToolsRequest {
  method: "tools/list";
  params?: { cursor?: string };
}

interface ListToolsResult {
  _meta?: { [key: string]: unknown };
  tools: Tool[];
  nextCursor?: string;
}
```

Call tool
```ts
interface CallToolRequest {
  method: "tools/call";
  params: {
    name: string;
    arguments?: { [key: string]: unknown };
  };
}

interface CallToolResult {
  _meta?: { [key: string]: unknown };
  content: ContentBlock[];    // see [[MCP Schema - Content Types]]
  structuredContent?: { [key: string]: unknown };
  isError?: boolean;          // default: false
}
```

Notifications
```ts
interface ToolListChangedNotification {
  method: "notifications/tools/list_changed";
  params?: { _meta?: { [key: string]: unknown }; [key: string]: unknown };
}
```

Notes and Constraints
- ToolAnnotations are hints, not guarantees; don’t blindly trust from untrusted servers.
- Tool errors should be reported via CallToolResult with isError=true (not as a JSON-RPC error).
- ContentBlock in results can include ResourceLink/EmbeddedResource; see [[MCP Schema - Content Types]] and [[MCP Schema - Resources]].


5) New note: [[MCP Schema - Requests & Responses]]

---
tags: [mcp, schema, requests, responses, endpoints]
---

# MCP Schema — Requests & Responses

Overview
- JSON-RPC envelopes for all methods and notifications
- Initialization and capabilities
- Pagination, progress, logging, cancellation
- Prompts & completion, sampling, elicitation
- Ping health check

Core primitives
```ts
type RequestId = string | number;
type ProgressToken = string | number;
type Cursor = string;
type LoggingLevel =
  | "debug" | "info" | "notice" | "warning"
  | "error" | "critical" | "alert" | "emergency";

interface Result {
  _meta?: { [key: string]: unknown };
  [key: string]: unknown;
}

// Alias: EmptyResult = Result
```

JSON-RPC wrappers
```ts
interface JSONRPCRequest {
  id: RequestId;
  jsonrpc: "2.0";
  method: string;
  params?: {
    _meta?: { progressToken?: ProgressToken; [key: string]: unknown };
    [key: string]: unknown;
  };
}

interface JSONRPCResponse {
  id: RequestId;
  jsonrpc: "2.0";
  result: Result;
}

interface JSONRPCError {
  id: RequestId;
  jsonrpc: "2.0";
  error: { code: number; message: string; data?: unknown };
}

interface JSONRPCNotification {
  jsonrpc: "2.0";
  method: string;
  params?: { _meta?: { [key: string]: unknown }; [key: string]: unknown };
}
```

Initialization & Capabilities
```ts
interface Implementation {
  name: string;
  version: string;
  title?: string; // UI-friendly
}

interface ClientCapabilities {
  elicitation?: object;
  sampling?: object;
  roots?: { listChanged?: boolean };
  experimental?: { [key: string]: object };
}

interface ServerCapabilities {
  completions?: object;
  logging?: object;
  prompts?: { listChanged?: boolean };
  resources?: { listChanged?: boolean; subscribe?: boolean };
  tools?: { listChanged?: boolean };
  experimental?: { [key: string]: object };
}
```

Initialize
```ts
interface InitializeRequest {
  method: "initialize";
  params: {
    capabilities: ClientCapabilities;
    clientInfo: Implementation;
    protocolVersion: string;
  };
}

interface InitializeResult {
  _meta?: { [key: string]: unknown };
  protocolVersion: string;
  serverInfo: Implementation;
  capabilities: ServerCapabilities;
  instructions?: string; // optional usage guidance
}
```

Initialized notification
```ts
interface InitializedNotification {
  method: "notifications/initialized";
  params?: { _meta?: { [key: string]: unknown }; [key: string]: unknown };
}
```

Prompts & Completion
- See content types in [[MCP Schema - Content Types]] for PromptMessage.

Prompt, PromptArgument, PromptReference
```ts
interface Prompt {
  name: string;
  title?: string;
  description?: string;
  arguments?: PromptArgument[];
  _meta?: { [key: string]: unknown };
}

interface PromptArgument {
  name: string;
  title?: string;
  description?: string;
  required?: boolean;
}

interface PromptReference {
  type: "ref/prompt";
  name: string;
  title?: string;
}
```

List prompts / Get prompt
```ts
interface ListPromptsRequest {
  method: "prompts/list";
  params?: { cursor?: string };
}
interface ListPromptsResult {
  _meta?: { [key: string]: unknown };
  prompts: Prompt[];
  nextCursor?: string;
}

interface GetPromptRequest {
  method: "prompts/get";
  params: { name: string; arguments?: { [key: string]: string } };
}
interface GetPromptResult {
  _meta?: { [key: string]: unknown };
  description?: string;
  messages: PromptMessage[]; // see [[MCP Schema - Content Types]]
}
```

Completion for prompt/template arguments
```ts
interface CompleteRequest {
  method: "completion/complete";
  params: {
    ref: PromptReference | ResourceTemplateReference; // see [[MCP Schema - Resources]]
    argument: { name: string; value: string };
    context?: { arguments?: { [key: string]: string } };
  };
}

interface CompleteResult {
  _meta?: { [key: string]: unknown };
  completion: {
    values: string[]; // ≤ 100
    total?: number;
    hasMore?: boolean;
  };
}
```

Sampling (Client-selected model)
- Messages: SamplingMessage in [[MCP Schema - Content Types]]
- Preferences and hints:

```ts
interface ModelHint {
  name?: string; // substring match; client may map to similar models across providers
}

interface ModelPreferences {
  costPriority?: number;         // 0..1
  speedPriority?: number;        // 0..1
  intelligencePriority?: number; // 0..1
  hints?: ModelHint[];           // evaluated in order; first match preferred
}
```

Create message
```ts
interface CreateMessageRequest {
  method: "sampling/createMessage";
  params: {
    messages: SamplingMessage[];
    maxTokens: number;
    includeContext?: "none" | "thisServer" | "allServers";
    systemPrompt?: string;
    stopSequences?: string[];
    temperature?: number;
    modelPreferences?: ModelPreferences;
    metadata?: object;
  };
}

interface CreateMessageResult {
  _meta?: { [key: string]: unknown };
  role: Role;
  model: string;
  content: TextContent | ImageContent | AudioContent; // see [[MCP Schema - Content Types]]
  stopReason?: string;
}
```

Elicitation (server asks client to get user input)
```ts
interface ElicitRequest {
  method: "elicitation/create";
  params: {
    message: string;
    requestedSchema: {
      type: "object";
      properties: { [key: string]: PrimitiveSchemaDefinition }; // see below
      required?: string[];
    };
  };
}

interface ElicitResult {
  _meta?: { [key: string]: unknown };
  action: "accept" | "decline" | "cancel";
  content?: { [key: string]: string | number | boolean }; // when action = "accept"
}
```

Primitive schema definitions (for elicitation)
```ts
type PrimitiveSchemaDefinition = StringSchema | NumberSchema | BooleanSchema | EnumSchema;

interface StringSchema {
  type: "string";
  title?: string;
  description?: string;
  format?: "uri" | "email" | "date" | "date-time";
  minLength?: number;
  maxLength?: number;
}

interface NumberSchema {
  type: "number" | "integer";
  title?: string;
  description?: string;
  minimum?: number;
  maximum?: number;
}

interface BooleanSchema {
  type: "boolean";
  title?: string;
  description?: string;
  default?: boolean;
}

interface EnumSchema {
  type: "string";
  title?: string;
  description?: string;
  enum: string[];
  enumNames?: string[];
}
```

Logging, Progress, Ping, Cancellation

Set logging level
```ts
interface SetLevelRequest {
  method: "logging/setLevel";
  params: { level: LoggingLevel };
}
```

Log message notification
```ts
interface LoggingMessageNotification {
  method: "notifications/message";
  params: { level: LoggingLevel; data: unknown; logger?: string };
}
```

Progress notification (for long-running requests)
```ts
interface ProgressNotification {
  method: "notifications/progress";
  params: {
    progressToken: ProgressToken;
    progress: number;    // monotonically increases
    total?: number;
    message?: string;
  };
}
```

Ping
```ts
interface PingRequest {
  method: "ping";
  params?: {
    _meta?: { progressToken?: ProgressToken; [key: string]: unknown };
    [key: string]: unknown;
  };
}
```

Cancellation
```ts
interface CancelledNotification {
  method: "notifications/cancelled";
  params: { requestId: RequestId; reason?: string };
}
// Do not cancel the "initialize" request.
```

Other notifications
```ts
interface PromptListChangedNotification {
  method: "notifications/prompts/list_changed";
  params?: { _meta?: { [key: string]: unknown }; [key: string]: unknown };
}
```

Pagination pattern
- All list requests may accept params.cursor?: string
- All list results may include nextCursor?: string
- Cursor is opaque.

Notes and Constraints
- Include progressToken in params._meta if you want progress notifications.
- instructions in InitializeResult can be used by clients to shape system prompts.
- ModelPreferences.hints are evaluated in order; clients may map across providers.
- Content types and resource blocks: see [[MCP Schema - Content Types]] and [[MCP Schema - Resources]].
